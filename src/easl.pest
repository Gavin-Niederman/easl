WHITESPACE = _{ " " }
COMMENT = _{ "--" ~ (!NEWLINE ~ ANY)* ~ NEWLINE? }

file = { SOI ~ statement* ~ EOI }

ident = { ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "-" | "_")* }

// Statements
statement = { (assignment | type_ascription /* TODO: add more statements */) ~ NEWLINE? }
assignment = { ident ~ "=" ~ expression ~ type_annotation? }
type_ascription = { ident ~ type_annotation }

type_annotation = { "::" ~ type }

// Expressions
expression = { literal | function_call | grouping }
function_call = { ident ~ expression* }
grouping = { "(" ~ expression ~ ")" }

// Literals
literal = { int_l | bool_l | string_l | color_l }

string_l = { "\"" ~ ANY* ~ "\"" }

bool_l = { true | false }
true = { "true" }
false = { "false" }

int_l = { ("0x" ~ hex) | ( "0b" ~ binary) | decimal }
hex = { (ASCII_HEX_DIGIT | "_")+ }
binary = { ("0" | "1" | "_")+ }
decimal = { ('0'..'9')+ }

color_l = { "#" ~ (ASCII_HEX_DIGIT{3} | ASCII_HEX_DIGIT{6}) }

// Types
type = { fun_t | base_type }

fun_t = { base_type ~ "->" ~ type }

base_type = @{ string_t | int_t | color_t | bool_t | unit_t | array_t | tuple_t }
string_t = { ^"String" }
int_t = { ^"Int" }
color_t = { ^"Color" }
bool_t = { ^"Bool" }
unit_t = { "()" }
array_t = { "[" ~ base_type ~ "]" }
tuple_t = { "(" ~ base_type ~ ")" }
